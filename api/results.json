{
    "django": {
        "expressions": {
            "comparisons": {
                "equal-to": "\n`varX` is equal to `varY`\n",
                "greater-than-or-equal": "\n2 is greater than or equal to 1\n\n\n\n2 is greater than or equal to 2\n",
                "greater-than": "\n2 is greater than 1\n",
                "less-than-or-equal": "\n1 is less than or equal to 2\n\n\n\n1 is less than or equal to 1\n",
                "less-than": "\n1 is less than 2\n",
                "not-equal-to": "\n`varX` is not equal to `varY`\n"
            },
            "reserved-words": {
                "function": "function",
                "var": "var"
            }
        },
        "filters": {
            "first": {
                "string": "1"
            }
        },
        "tags": {
            "if": {
                "true-capitalized": "True",
                "true-variable": "true",
                "true": ""
            }
        }
    },
    "jinja2": {
        "expressions": {
            "comparisons": {
                "equal-to": "\n`varX` is equal to `varY`\n",
                "greater-than-or-equal": "\n2 is greater than or equal to 1\n\n\n\n2 is greater than or equal to 2\n",
                "greater-than": "\n2 is greater than 1\n",
                "less-than-or-equal": "\n1 is less than or equal to 2\n\n\n\n1 is less than or equal to 1\n",
                "less-than": "\n1 is less than 2\n",
                "not-equal-to": "\n`varX` is not equal to `varY`\n"
            },
            "math": {
                "addition": "5",
                "devision": "2.0",
                "multiplication": "10",
                "power": "8",
                "subtraction": "2"
            },
            "reserved-words": {
                "function": "function",
                "var": "var"
            }
        },
        "filters": {
            "abs": {
                "negative-float": "3.14",
                "negative-integer": "3",
                "positive-float": "3.14",
                "positive-integer": "3",
                "variable": "3",
                "zero": "0"
            },
            "batch": {
                "size-and-fill": "<table>\n    \n        <tr>\n            \n                <td>a</td>\n            \n                <td>b</td>\n            \n                <td>c</td>\n            \n        </tr>\n    \n        <tr>\n            \n                <td>d</td>\n            \n                <td>e</td>\n            \n                <td>f</td>\n            \n        </tr>\n    \n        <tr>\n            \n                <td>g</td>\n            \n                <td>No item</td>\n            \n                <td>No item</td>\n            \n        </tr>\n    \n</table>",
                "size-only": "<table>\n\n    <tr>\n    \n        <td>a</td>\n    \n        <td>b</td>\n    \n        <td>c</td>\n    \n    </tr>\n\n    <tr>\n    \n        <td>d</td>\n    \n        <td>e</td>\n    \n        <td>f</td>\n    \n    </tr>\n\n    <tr>\n    \n        <td>g</td>\n    \n    </tr>\n\n</table>"
            },
            "capitalize": {
                "mixed-case": "My first car",
                "number": "5",
                "sentence": "My first car",
                "starts-with-number": "2nd car",
                "word": "Car"
            },
            "center": {
                "default": "<pre>                                       x                                        </pre>",
                "width-20": "<pre>         x          </pre>"
            },
            "default": {
                "alias-d": "\"varX\" is not defined",
                "empty-string-strict": "passed string is empty",
                "empty-string": "",
                "undefined-variable": "\"varX\" is not defined"
            },
            "dictsort": {
                "by-value": "1:f\n2:b\n3:e\n4:c\n5:a\n6:d\n",
                "case-insensitive": "A\na\nB\nb\nc\nC\n",
                "case-sensitive": "A\nB\nC\na\nb\nc\n",
                "default": "a\nb\nC\nd\nE\nf\n"
            },
            "first": {
                "array": "1",
                "object": "",
                "string": "1"
            }
        },
        "tags": {
            "if": {
                "true-capitalized": "True",
                "true-variable": "true",
                "true": "true"
            },
            "raw": {
                "broken-expression": "{{ x }",
                "broken-tag": "{% if i_am_stupid }Still do your job well",
                "comment": "{# test ",
                "multiline": "\n{{ varX }}\nvalue Y\n\n    {{ varZ }}\n",
                "multiple": "{{ varX }}value Y{{ varZ }}",
                "tag": "hello {{ {% %} }}",
                "text": "abc"
            }
        }
    },
    "nunjucks": {
        "expressions": {
            "comparisons": {
                "equal-to": "\n`varX` is equal to `varY`\n",
                "greater-than-or-equal": "\n2 is greater than or equal to 1\n\n\n\n2 is greater than or equal to 2\n",
                "greater-than": "\n2 is greater than 1\n",
                "less-than-or-equal": "\n1 is less than or equal to 2\n\n\n\n1 is less than or equal to 1\n",
                "less-than": "\n1 is less than 2\n",
                "not-equal-to": "\n`varX` is not equal to `varY`\n",
                "strict-equal-to": "\n1234 not strict equal to 1234\n",
                "strict-not-equal-to": "\n1234 is not strict equal to '1234'\n"
            },
            "math": {
                "addition": "5",
                "devision": "2",
                "multiplication": "10",
                "power": "8",
                "subtraction": "2"
            },
            "reserved-words": {
                "function": "function",
                "var": "var"
            }
        },
        "filters": {
            "abs": {
                "negative-float": "3.14",
                "negative-integer": "3",
                "positive-float": "3.14",
                "positive-integer": "3",
                "variable": "3",
                "zero": "0"
            },
            "batch": {
                "size-and-fill": "<table>\n    \n        <tr>\n            \n                <td>a</td>\n            \n                <td>b</td>\n            \n                <td>c</td>\n            \n        </tr>\n    \n        <tr>\n            \n                <td>d</td>\n            \n                <td>e</td>\n            \n                <td>f</td>\n            \n        </tr>\n    \n        <tr>\n            \n                <td>g</td>\n            \n                <td>No item</td>\n            \n                <td>No item</td>\n            \n        </tr>\n    \n</table>",
                "size-only": "<table>\n\n    <tr>\n    \n        <td>a</td>\n    \n        <td>b</td>\n    \n        <td>c</td>\n    \n    </tr>\n\n    <tr>\n    \n        <td>d</td>\n    \n        <td>e</td>\n    \n        <td>f</td>\n    \n    </tr>\n\n    <tr>\n    \n        <td>g</td>\n    \n    </tr>\n\n</table>"
            },
            "capitalize": {
                "mixed-case": "My first car",
                "sentence": "My first car",
                "starts-with-number": "2nd car",
                "word": "Car"
            },
            "center": {
                "default": "<pre>                                       x                                        </pre>",
                "width-20": "<pre>         x          </pre>"
            },
            "default": {
                "alias-d": "&quot;varX&quot; is not defined",
                "empty-string-strict": "passed string is empty",
                "empty-string": "",
                "undefined-property-bracket-notation": "&quot;x&quot; on &quot;vars&quot; is not defined",
                "undefined-property-dot-notation": "&quot;x&quot; on &quot;vars&quot; is not defined\n",
                "undefined-variable": "&quot;varX&quot; is not defined"
            },
            "dictsort": {
                "by-value": "1:f\n2:b\n3:e\n4:c\n5:a\n6:d\n",
                "case-insensitive": "A\na\nb\nB\nc\nC\n",
                "case-sensitive": "A\nB\nC\na\nb\nc\n",
                "default": "a\nb\nC\nd\nE\nf\n"
            },
            "first": {
                "array": "1",
                "number": "",
                "object": "",
                "string": "1"
            }
        },
        "tags": {
            "if": {
                "true-capitalized": "True",
                "true-variable": "true",
                "true": "true"
            },
            "raw": {
                "broken-expression": "{{ x }",
                "broken-tag": "{% if i_am_stupid }Still do your job well",
                "comment": "{# test ",
                "multiline": "\n{{ varX }}\nvalue Y\n\n    {{ varZ }}\n",
                "multiple": "{{ varX }}value Y{{ varZ }}",
                "nested-raw": "{% raw %}{{ x }{% endraw %}",
                "tag": "hello {{ {% %} }}",
                "text": "abc"
            }
        }
    },
    "swig": {
        "expressions": {
            "comparisons": {
                "equal-to": "\n`varX` is equal to `varY`\n",
                "greater-than-or-equal": "\n2 is greater than or equal to 1\n\n\n\n2 is greater than or equal to 2\n",
                "greater-than": "\n2 is greater than 1\n",
                "less-than-or-equal": "\n1 is less than or equal to 2\n\n\n\n1 is less than or equal to 1\n",
                "less-than": "\n1 is less than 2\n",
                "not-equal-to": "\n`varX` is not equal to `varY`\n",
                "strict-equal-to": "\n1234 not strict equal to 1234\n",
                "strict-not-equal-to": "\n1234 is not strict equal to '1234'\n"
            },
            "math": {
                "addition": "5",
                "devision": "2",
                "multiplication": "10",
                "subtraction": "2"
            }
        },
        "filters": {
            "capitalize": {
                "mixed-case": "My first car",
                "number": "5",
                "sentence": "My first car",
                "starts-with-number": "2nd car",
                "word": "Car"
            },
            "default": {
                "empty-string-strict": "passed string is empty",
                "empty-string": "passed string is empty",
                "undefined-property-bracket-notation": "&quot;x&quot; on &quot;vars&quot; is not defined",
                "undefined-property-dot-notation": "&quot;x&quot; on &quot;vars&quot; is not defined\n",
                "undefined-variable": "&quot;varX&quot; is not defined"
            },
            "first": {
                "array": "1",
                "number": "undefined",
                "object": "1",
                "string": "1"
            }
        },
        "tags": {
            "if": {
                "true-capitalized": "",
                "true-variable": "true",
                "true": "true"
            },
            "raw": {
                "broken-expression": "{{ x }",
                "broken-tag": "{% if i_am_stupid }Still do your job well{% endraw %}",
                "comment": "{# test ",
                "multiline": "\n{{ varX }}\nvalue Y\n\n    {{ varZ }}\n",
                "multiple": "{{ varX }}value Y{{ varZ }}",
                "tag": "hello {{ {% %} }}",
                "text": "abc"
            }
        }
    },
    "twig": {
        "expressions": {
            "comparisons": {
                "ends-with": "\"Templates\" ends with \"s\"\n",
                "equal-to": "`varX` is equal to `varY`\n",
                "greater-than-or-equal": "2 is greater than or equal to 1\n\n2 is greater than or equal to 2\n",
                "greater-than": "2 is greater than 1\n",
                "less-than-or-equal": "1 is less than or equal to 2\n\n1 is less than or equal to 1\n",
                "less-than": "1 is less than 2\n",
                "matches": "`phone` is a valid phone number\n",
                "not-equal-to": "`varX` is not equal to `varY`\n",
                "starts-with": "\"Templates\" starts with \"T\"\n"
            },
            "math": {
                "addition": "5",
                "devision": "2",
                "multiplication": "10",
                "power": "8",
                "subtraction": "2"
            },
            "reserved-words": {
                "function": "function",
                "var": "var"
            }
        },
        "filters": {
            "abs": {
                "negative-float": "-3.14",
                "negative-integer": "-3",
                "positive-float": "3.14",
                "positive-integer": "3",
                "variable": "3",
                "zero": "0"
            },
            "batch": {
                "size-and-fill": "<table>\n            <tr>\n                            <td>a</td>\n                            <td>b</td>\n                            <td>c</td>\n                    </tr>\n            <tr>\n                            <td>d</td>\n                            <td>e</td>\n                            <td>f</td>\n                    </tr>\n            <tr>\n                            <td>g</td>\n                            <td>No item</td>\n                            <td>No item</td>\n                    </tr>\n    </table>",
                "size-only": "<table>\n    <tr>\n            <td>a</td>\n            <td>b</td>\n            <td>c</td>\n        </tr>\n    <tr>\n            <td>d</td>\n            <td>e</td>\n            <td>f</td>\n        </tr>\n    <tr>\n            <td>g</td>\n        </tr>\n</table>"
            },
            "capitalize": {
                "mixed-case": "My first car",
                "number": "5",
                "sentence": "My first car",
                "starts-with-number": "2nd car",
                "word": "Car"
            },
            "default": {
                "empty-string-strict": "passed string is empty",
                "empty-string": "passed string is empty",
                "undefined-property-bracket-notation": "&quot;x&quot; on &quot;vars&quot; is not defined",
                "undefined-property-dot-notation": "&quot;x&quot; on &quot;vars&quot; is not defined\n",
                "undefined-variable": "&quot;varX&quot; is not defined"
            },
            "first": {
                "array": "1",
                "number": "1",
                "object": "1",
                "string": "1"
            }
        },
        "tags": {
            "if": {
                "true-capitalized": "",
                "true-variable": "true",
                "true": "true"
            },
            "raw": {
                "broken-expression": "{{ x }",
                "broken-tag": "{% if i_am_stupid }Still do your job well",
                "comment": "{# test ",
                "multiline": "\n{{ varX }}\nvalue Y\n\n    {{ varZ }}\n",
                "multiple": "{{ varX }}value Y{{ varZ }}",
                "tag": "hello {{ {% %} }}",
                "text": "abc"
            }
        }
    }
}